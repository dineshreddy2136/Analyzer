digraph CallGraph {
  rankdir="LR";
  node [shape=box, style=rounded, fontname="Helvetica"];
  edge [fontname="Helvetica"];
  "src.api" -> "src.api.APIApplication";
  "src.api" -> "src.api.NotFoundError";
  "src.api" -> "src.api.ProductController";
  "src.api" -> "src.api.UserController";
  "src.api" -> "src.models";
  "src.api" -> "src.api.APIResponse";
  "src.api" -> "src.api.ValidationError";
  "src.api" -> "src.api.APIError";
  "src.api" -> "src.api.AuthenticationError";
  "src.api" -> "src.api.AuthorizationError";
  "src.api" -> "src.database";
  "src.api" -> "src.api.RequestValidator";
  "src.api.APIError.__init__" -> "<builtin>.super";
  "src.api.ValidationError.__init__" -> "<str>.join";
  "src.api.ValidationError.__init__" -> "<builtin>.super";
  "src.api.NotFoundError.__init__" -> "<builtin>.super";
  "src.api.AuthenticationError.__init__" -> "<builtin>.super";
  "src.api.AuthorizationError.__init__" -> "<builtin>.super";
  "src.api.APIResponse.__init__" -> "datetime.datetime.now";
  "src.api.APIResponse.to_dict" -> "src.api.APIResponse._serialize_data";
  "src.api.APIResponse._serialize_data" -> "src.api.APIResponse._serialize_data";
  "src.api.APIResponse._serialize_data" -> "<builtin>.isinstance";
  "src.api.APIResponse._serialize_data" -> "<builtin>.hasattr";
  "src.api.APIResponse._serialize_data" -> "src.typing.Any.to_dict";
  "src.api.APIResponse._serialize_data" -> "src.typing.Any.items";
  "src.api.APIResponse.to_json" -> "src.api.APIResponse.to_dict";
  "src.api.APIResponse.to_json" -> "json.dumps";
  "src.api.RequestValidator.validate_user_creation_request" -> "extend";
  "src.api.RequestValidator.validate_user_creation_request" -> "append";
  "src.api.RequestValidator.validate_user_creation_request" -> "<builtin>.len";
  "src.api.RequestValidator.validate_user_creation_request" -> "src.models.validate_business_rules";
  "src.api.RequestValidator.validate_user_creation_request" -> "src.api.Dict[str, Any].get";
  "src.api.RequestValidator.validate_product_creation_request" -> "<builtin>.float";
  "src.api.RequestValidator.validate_product_creation_request" -> "src.models.validate_business_rules";
  "src.api.RequestValidator.validate_product_creation_request" -> "extend";
  "src.api.RequestValidator.validate_product_creation_request" -> "append";
  "src.api.RequestValidator.validate_product_creation_request" -> "<builtin>.int";
  "src.api.RequestValidator.validate_product_creation_request" -> "src.api.Dict[str, Any].get";
  "src.api.RequestValidator.validate_pagination_params" -> "src.api.ValidationError.__init__";
  "src.api.RequestValidator.validate_pagination_params" -> "<builtin>.max";
  "src.api.RequestValidator.validate_pagination_params" -> "<builtin>.int";
  "src.api.RequestValidator.validate_pagination_params" -> "<builtin>.min";
  "src.api.RequestValidator.validate_pagination_params" -> "src.api.Dict[str, Any].get";
  "src.api.UserController.__init__" -> "src.models.UserService.__init__";
  "src.api.UserController.__init__" -> "logging.getLogger";
  "src.api.UserController.create_user" -> "src.models.UserService.create_user";
  "src.api.UserController.create_user" -> "src.api.APIResponse.__init__";
  "src.api.UserController.create_user" -> "<builtin>.str";
  "src.api.UserController.create_user" -> "src.api.APIError.__init__";
  "src.api.UserController.create_user" -> "src.api.ValidationError.__init__";
  "src.api.UserController.create_user" -> "src.api.RequestValidator.validate_user_creation_request";
  "src.api.UserController.get_user" -> "src.api.APIResponse.__init__";
  "src.api.UserController.get_user" -> "src.database.BaseRepository.find_by_id";
  "src.api.UserController.get_user" -> "<builtin>.str";
  "src.api.UserController.get_user" -> "src.api.NotFoundError.__init__";
  "src.api.UserController.get_user" -> "src.api.APIError.__init__";
  "src.api.UserController.update_user" -> "src.models.UserService.update_user_profile";
  "src.api.UserController.update_user" -> "src.api.APIResponse.__init__";
  "src.api.UserController.update_user" -> "src.database.BaseRepository.find_by_id";
  "src.api.UserController.update_user" -> "<builtin>.str";
  "src.api.UserController.update_user" -> "src.api.NotFoundError.__init__";
  "src.api.UserController.update_user" -> "src.api.APIError.__init__";
  "src.api.UserController.authenticate_user" -> "datetime.timedelta";
  "src.api.UserController.authenticate_user" -> "src.api.APIResponse.__init__";
  "src.api.UserController.authenticate_user" -> "<builtin>.str";
  "src.api.UserController.authenticate_user" -> "src.api.UserController._generate_session_token";
  "src.api.UserController.authenticate_user" -> "src.models.UserService.authenticate_user";
  "src.api.UserController.authenticate_user" -> "src.api.APIError.__init__";
  "src.api.UserController.authenticate_user" -> "src.api.AuthenticationError.__init__";
  "src.api.UserController.authenticate_user" -> "datetime.datetime.now";
  "src.api.UserController.authenticate_user" -> "src.api.ValidationError.__init__";
  "src.api.UserController.authenticate_user" -> "src.api.Dict[str, Any].get";
  "src.api.UserController.get_users_by_role" -> "src.api.APIResponse.__init__";
  "src.api.UserController.get_users_by_role" -> "src.api.RequestValidator.validate_pagination_params";
  "src.api.UserController.get_users_by_role" -> "src.models.UserService.get_users_by_role";
  "src.api.UserController.get_users_by_role" -> "<builtin>.str";
  "src.api.UserController.get_users_by_role" -> "src.api.APIError.__init__";
  "src.api.UserController.get_users_by_role" -> "<builtin>.len";
  "src.api.UserController._generate_session_token" -> "datetime.datetime.now";
  "src.api.UserController._generate_session_token" -> "hashlib.sha256";
  "src.api.UserController._generate_session_token" -> "<str>.encode";
  "src.api.ProductController.__init__" -> "src.models.ProductService.__init__";
  "src.api.ProductController.__init__" -> "logging.getLogger";
  "src.api.ProductController.create_product" -> "src.api.APIResponse.__init__";
  "src.api.ProductController.create_product" -> "src.models.ProductService.create_product";
  "src.api.ProductController.create_product" -> "<builtin>.str";
  "src.api.ProductController.create_product" -> "<builtin>.float";
  "src.api.ProductController.create_product" -> "src.api.APIError.__init__";
  "src.api.ProductController.create_product" -> "src.api.RequestValidator.validate_product_creation_request";
  "src.api.ProductController.create_product" -> "src.api.ValidationError.__init__";
  "src.api.ProductController.create_product" -> "<builtin>.int";
  "src.api.ProductController.create_product" -> "src.api.Dict[str, Any].get";
  "src.api.ProductController.get_product" -> "src.api.APIResponse.__init__";
  "src.api.ProductController.get_product" -> "src.database.BaseRepository.find_by_id";
  "src.api.ProductController.get_product" -> "<builtin>.str";
  "src.api.ProductController.get_product" -> "src.api.NotFoundError.__init__";
  "src.api.ProductController.get_product" -> "src.api.APIError.__init__";
  "src.api.ProductController.update_product_stock" -> "src.api.APIResponse.__init__";
  "src.api.ProductController.update_product_stock" -> "<builtin>.str";
  "src.api.ProductController.update_product_stock" -> "src.api.APIError.__init__";
  "src.api.ProductController.update_product_stock" -> "src.api.ValidationError.__init__";
  "src.api.ProductController.update_product_stock" -> "src.models.ProductService.update_product_stock";
  "src.api.ProductController.update_product_stock" -> "<builtin>.int";
  "src.api.ProductController.update_product_stock" -> "src.api.Dict[str, Any].get";
  "src.api.ProductController.search_products" -> "src.models.ProductService.search_products";
  "src.api.ProductController.search_products" -> "src.api.APIResponse.__init__";
  "src.api.ProductController.search_products" -> "src.api.RequestValidator.validate_pagination_params";
  "src.api.ProductController.search_products" -> "<builtin>.str";
  "src.api.ProductController.search_products" -> "src.api.APIError.__init__";
  "src.api.ProductController.search_products" -> "src.api.ValidationError.__init__";
  "src.api.ProductController.search_products" -> "<builtin>.len";
  "src.api.ProductController.search_products" -> "src.api.Dict[str, Any].get";
  "src.api.ProductController.get_products_by_category" -> "src.api.APIResponse.__init__";
  "src.api.ProductController.get_products_by_category" -> "src.api.RequestValidator.validate_pagination_params";
  "src.api.ProductController.get_products_by_category" -> "<builtin>.str";
  "src.api.ProductController.get_products_by_category" -> "src.models.ProductService.get_products_by_category";
  "src.api.ProductController.get_products_by_category" -> "src.api.APIError.__init__";
  "src.api.ProductController.get_products_by_category" -> "<builtin>.len";
  "src.api.ProductController.get_low_stock_products" -> "<builtin>.int";
  "src.api.ProductController.get_low_stock_products" -> "src.api.APIResponse.__init__";
  "src.api.ProductController.get_low_stock_products" -> "src.api.RequestValidator.validate_pagination_params";
  "src.api.ProductController.get_low_stock_products" -> "<builtin>.str";
  "src.api.ProductController.get_low_stock_products" -> "src.api.APIError.__init__";
  "src.api.ProductController.get_low_stock_products" -> "src.models.ProductService.get_low_stock_products";
  "src.api.ProductController.get_low_stock_products" -> "src.api.ValidationError.__init__";
  "src.api.ProductController.get_low_stock_products" -> "<builtin>.len";
  "src.api.ProductController.get_low_stock_products" -> "src.api.Dict[str, Any].get";
  "src.api.APIApplication.__init__" -> "src.api.ProductController.__init__";
  "src.api.APIApplication.__init__" -> "logging.getLogger";
  "src.api.APIApplication.__init__" -> "src.api.UserController.__init__";
  "src.api.APIApplication.__init__" -> "src.api.APIApplication._setup_logging";
  "src.api.APIApplication.__init__" -> "src.database.create_database_connection";
  "src.api.APIApplication._setup_logging" -> "logging.basicConfig";
  "src.api.APIApplication.handle_request" -> "src.api.APIApplication._route_user_request";
  "src.api.APIApplication.handle_request" -> "src.api.APIApplication._route_product_request";
  "src.api.APIApplication.handle_request" -> "src.api.APIError.__init__";
  "src.api.APIApplication.handle_request" -> "<builtin>.str";
  "src.api.APIApplication.handle_request" -> "src.api.str.startswith";
  "src.api.APIApplication._route_user_request" -> "src.api.UserController.create_user";
  "src.api.APIApplication._route_user_request" -> "src.api.UserController.get_users_by_role";
  "src.api.APIApplication._route_user_request" -> "src.api.UserController.get_user";
  "src.api.APIApplication._route_user_request" -> "src.api.APIError.__init__";
  "src.api.APIApplication._route_user_request" -> "src.api.UserController.update_user";
  "src.api.APIApplication._route_user_request" -> "src.api.UserController.authenticate_user";
  "src.api.APIApplication._route_user_request" -> "src.api.APIApplication._extract_id_from_endpoint";
  "src.api.APIApplication._route_user_request" -> "src.api.str.startswith";
  "src.api.APIApplication._route_user_request" -> "src.api.str.split";
  "src.api.APIApplication._route_product_request" -> "src.api.ProductController.search_products";
  "src.api.APIApplication._route_product_request" -> "src.api.ProductController.get_low_stock_products";
  "src.api.APIApplication._route_product_request" -> "src.api.ProductController.update_product_stock";
  "src.api.APIApplication._route_product_request" -> "src.api.ProductController.get_product";
  "src.api.APIApplication._route_product_request" -> "src.api.ProductController.create_product";
  "src.api.APIApplication._route_product_request" -> "src.api.APIError.__init__";
  "src.api.APIApplication._route_product_request" -> "src.api.ProductController.get_products_by_category";
  "src.api.APIApplication._route_product_request" -> "src.api.APIApplication._extract_id_from_endpoint";
  "src.api.APIApplication._route_product_request" -> "src.api.str.startswith";
  "src.api.APIApplication._route_product_request" -> "src.api.str.split";
  "src.api.APIApplication._extract_id_from_endpoint" -> "src.api.APIError.__init__";
  "src.api.APIApplication._extract_id_from_endpoint" -> "<builtin>.int";
  "src.api.APIApplication._extract_id_from_endpoint" -> "src.api.str.replace";
  "src.api.APIApplication.shutdown" -> "src.database.ConnectionPool.cleanup_stale_connections";
  "src.api.APIApplication.shutdown" -> "<builtin>.hasattr";
  "src.api.create_api_application" -> "src.api.APIApplication.__init__";
  "src.api.format_error_response" -> "src.api.APIResponse.__init__";
  "src.api.format_error_response" -> "src.api.APIResponse.to_dict";
  "src.api.format_error_response" -> "<builtin>.hasattr";
  "src.api.log_request_response" -> "json.dumps";
  "src.api.log_request_response" -> "logging.getLogger";
  "src.models" -> "src.models.ProductService";
  "src.models" -> "src.models.UserRepository";
  "src.models" -> "src.models.UserService";
  "src.models" -> "src.database";
  "src.models" -> "src.models.ProductRepository";
  "src.models" -> "src.models.Product";
  "src.models" -> "src.models.User";
  "src.models.User.__post_init__" -> "datetime.datetime.now";
  "src.models.User.get_full_name" -> "<str>.strip";
  "src.models.User.is_admin" -> "src.models.User.has_role";
  "src.models.User.update_last_login" -> "datetime.datetime.now";
  "src.models.Product.__post_init__" -> "datetime.datetime.now";
  "src.models.Product.__post_init__" -> "src.models.Product._generate_sku";
  "src.models.Product._generate_sku" -> "datetime.datetime.now";
  "src.models.Product._generate_sku" -> "hashlib.md5";
  "src.models.Product._generate_sku" -> "<str>.encode";
  "src.models.Product.update_stock" -> "<builtin>.max";
  "src.models.Product.calculate_discounted_price" -> "<builtin>.ValueError";
  "src.models.Product.calculate_discounted_price" -> "<builtin>.round";
  "src.models.UserService.__init__" -> "src.database.TransactionManager.__init__";
  "src.models.UserService.__init__" -> "src.models.UserRepository.__init__";
  "src.models.UserService.create_user" -> "src.models.UserService._hash_password";
  "src.models.UserService.create_user" -> "<builtin>.ValueError";
  "src.models.UserService.create_user" -> "src.models.UserService._validate_username";
  "src.models.UserService.create_user" -> "src.models.UserService._validate_email";
  "src.models.UserService.create_user" -> "src.models.UserService._validate_password";
  "src.models.UserService.create_user" -> "src.models.UserRepository.save";
  "src.models.UserService.create_user" -> "src.models.UserRepository.find_by_email";
  "src.models.UserService.create_user" -> "src.models.UserRepository.find_by_username";
  "src.models.UserService.authenticate_user" -> "src.models.User.update_last_login";
  "src.models.UserService.authenticate_user" -> "src.models.UserRepository.save";
  "src.models.UserService.authenticate_user" -> "src.models.UserService._verify_password";
  "src.models.UserService.authenticate_user" -> "src.models.UserRepository.find_by_username";
  "src.models.UserService.update_user_profile" -> "<builtin>.setattr";
  "src.models.UserService.update_user_profile" -> "<map>.update";
  "src.models.UserService.update_user_profile" -> "<builtin>.ValueError";
  "src.models.UserService.update_user_profile" -> "src.database.BaseRepository.find_by_id";
  "src.models.UserService.update_user_profile" -> "datetime.datetime.now";
  "src.models.UserService.update_user_profile" -> "src.models.UserRepository.save";
  "src.models.UserService.update_user_profile" -> "src.models.Dict[str, Any].keys";
  "src.models.UserService.update_user_profile" -> "src.models.Dict[str, Any].items";
  "src.models.UserService.deactivate_user" -> "datetime.datetime.now";
  "src.models.UserService.deactivate_user" -> "src.database.BaseRepository.find_by_id";
  "src.models.UserService.deactivate_user" -> "src.models.UserRepository.save";
  "src.models.UserService.get_users_by_role" -> "src.models.UserRepository.find_by_role";
  "src.models.UserService._validate_username" -> "<builtin>.isinstance";
  "src.models.UserService._validate_username" -> "<str>.isalnum";
  "src.models.UserService._validate_username" -> "<builtin>.len";
  "src.models.UserService._validate_username" -> "src.models.str.isalnum";
  "src.models.UserService._validate_email" -> "<builtin>.isinstance";
  "src.models.UserService._validate_email" -> "<builtin>.len";
  "src.models.UserService._validate_password" -> "<builtin>.isinstance";
  "src.models.UserService._validate_password" -> "<builtin>.len";
  "src.models.UserService._validate_password" -> "<builtin>.any";
  "src.models.UserService._hash_password" -> "hashlib.sha256";
  "src.models.UserService._hash_password" -> "<str>.encode";
  "src.models.UserService._verify_password" -> "src.models.UserService._hash_password";
  "src.models.ProductService.__init__" -> "src.models.ProductRepository.__init__";
  "src.models.ProductService.__init__" -> "src.database.TransactionManager.__init__";
  "src.models.ProductService.create_product" -> "<builtin>.round";
  "src.models.ProductService.create_product" -> "<builtin>.ValueError";
  "src.models.ProductService.create_product" -> "<str>.strip";
  "src.models.ProductService.create_product" -> "<builtin>.len";
  "src.models.ProductService.create_product" -> "src.models.ProductRepository.save";
  "src.models.ProductService.create_product" -> "src.models.str.strip";
  "src.models.ProductService.update_product_stock" -> "src.database.TransactionManager.begin_transaction";
  "src.models.ProductService.update_product_stock" -> "<builtin>.ValueError";
  "src.models.ProductService.update_product_stock" -> "src.database.BaseRepository.find_by_id";
  "src.models.ProductService.update_product_stock" -> "src.database.TransactionManager.rollback_transaction";
  "src.models.ProductService.update_product_stock" -> "src.models.ProductRepository.save";
  "src.models.ProductService.update_product_stock" -> "src.database.TransactionManager.commit_transaction";
  "src.models.ProductService.update_product_stock" -> "datetime.datetime.now";
  "src.models.ProductService.update_product_stock" -> "src.database.TransactionManager.add_operation";
  "src.models.ProductService.get_products_by_category" -> "src.models.ProductRepository.find_by_category";
  "src.models.ProductService.search_products" -> "src.models.ProductRepository.search";
  "src.models.ProductService.get_low_stock_products" -> "src.models.ProductRepository.find_low_stock";
  "src.models.UserRepository.__init__" -> "<builtin>.super";
  "src.models.UserRepository.find_by_username" -> "src.database.BaseRepository._execute_query";
  "src.models.UserRepository.find_by_username" -> "src.models.UserRepository._map_result_to_user";
  "src.models.UserRepository.find_by_username" -> "<map>.get";
  "src.models.UserRepository.find_by_email" -> "src.database.BaseRepository._execute_query";
  "src.models.UserRepository.find_by_email" -> "src.models.UserRepository._map_result_to_user";
  "src.models.UserRepository.find_by_email" -> "<map>.get";
  "src.models.UserRepository.find_by_role" -> "src.database.BaseRepository._execute_query";
  "src.models.UserRepository.find_by_role" -> "src.models.UserRepository._map_result_to_user";
  "src.models.UserRepository.find_by_role" -> "<map>.get";
  "src.models.UserRepository.save" -> "json.dumps";
  "src.models.UserRepository.save" -> "<builtin>.super";
  "src.models.UserRepository.save" -> "src.models.User.to_dict";
  "src.models.UserRepository._map_result_to_user" -> "json.loads";
  "src.models.UserRepository._map_result_to_user" -> "src.models.Dict[str, Any].get";
  "src.models.ProductRepository.__init__" -> "<builtin>.super";
  "src.models.ProductRepository.find_by_category" -> "src.database.BaseRepository._execute_query";
  "src.models.ProductRepository.find_by_category" -> "src.models.ProductRepository._map_result_to_product";
  "src.models.ProductRepository.find_by_category" -> "<map>.get";
  "src.models.ProductRepository.find_by_sku" -> "src.database.BaseRepository._execute_query";
  "src.models.ProductRepository.find_by_sku" -> "src.models.ProductRepository._map_result_to_product";
  "src.models.ProductRepository.find_by_sku" -> "<map>.get";
  "src.models.ProductRepository.search" -> "src.database.BaseRepository._execute_query";
  "src.models.ProductRepository.search" -> "src.models.ProductRepository._map_result_to_product";
  "src.models.ProductRepository.search" -> "<map>.get";
  "src.models.ProductRepository.find_low_stock" -> "src.database.BaseRepository._execute_query";
  "src.models.ProductRepository.find_low_stock" -> "src.models.ProductRepository._map_result_to_product";
  "src.models.ProductRepository.find_low_stock" -> "<map>.get";
  "src.models.ProductRepository.save" -> "json.dumps";
  "src.models.ProductRepository.save" -> "<builtin>.super";
  "src.models.ProductRepository.save" -> "src.models.Product.to_dict";
  "src.models.ProductRepository.save" -> "src.models.User.to_dict";
  "src.models.ProductRepository._map_result_to_product" -> "json.loads";
  "src.models.ProductRepository._map_result_to_product" -> "src.models.Dict[str, Any].get";
  "src.models.hash_user_password" -> "hashlib.sha256";
  "src.models.hash_user_password" -> "<str>.encode";
  "src.models.validate_business_rules" -> "append";
  "src.models.validate_business_rules" -> "<builtin>.len";
  "src.models.validate_business_rules" -> "src.models.Dict[str, Any].get";
  "src.database" -> "src.database.TransactionManager";
  "src.database" -> "src.database.DatabaseError";
  "src.database" -> "src.database.BaseRepository";
  "src.database" -> "src.database.ConnectionPool";
  "src.database.ConnectionPool.__init__" -> "src.database.ConnectionPool._initialize_pool";
  "src.database.ConnectionPool._initialize_pool" -> "src.database.ConnectionPool._create_connection";
  "src.database.ConnectionPool._initialize_pool" -> "append";
  "src.database.ConnectionPool._initialize_pool" -> "<builtin>.range";
  "src.database.ConnectionPool._create_connection" -> "datetime.datetime.now";
  "src.database.ConnectionPool._create_connection" -> "<builtin>.len";
  "src.database.ConnectionPool.get_connection" -> "datetime.datetime.now";
  "src.database.ConnectionPool.get_connection" -> "append";
  "src.database.ConnectionPool.get_connection" -> "pop";
  "src.database.ConnectionPool.return_connection" -> "append";
  "src.database.ConnectionPool.return_connection" -> "remove";
  "src.database.ConnectionPool.cleanup_stale_connections" -> "datetime.timedelta";
  "src.database.ConnectionPool.cleanup_stale_connections" -> "src.database.ConnectionPool.return_connection";
  "src.database.ConnectionPool.cleanup_stale_connections" -> "datetime.datetime.now";
  "src.database.ConnectionPool.cleanup_stale_connections" -> "append";
  "src.database.ConnectionPool.cleanup_stale_connections" -> "<builtin>.len";
  "src.database.BaseRepository._execute_query" -> "src.database.BaseRepository._get_connection";
  "src.database.BaseRepository._execute_query" -> "src.database.BaseRepository._simulate_query_execution";
  "src.database.BaseRepository._simulate_query_execution" -> "datetime.datetime.now";
  "src.database.BaseRepository.find_by_id" -> "src.database.BaseRepository._execute_query";
  "src.database.BaseRepository.find_by_id" -> "src.database.BaseRepository._map_result_to_entity";
  "src.database.BaseRepository.find_all" -> "src.database.BaseRepository._execute_query";
  "src.database.BaseRepository.find_all" -> "src.database.BaseRepository._map_result_to_entity";
  "src.database.BaseRepository.find_all" -> "<map>.get";
  "src.database.BaseRepository.save" -> "src.database.BaseRepository._update_entity";
  "src.database.BaseRepository.save" -> "src.database.BaseRepository._create_entity";
  "src.database.BaseRepository._create_entity" -> "<str>.join";
  "src.database.BaseRepository._create_entity" -> "src.database.BaseRepository._generate_new_id";
  "src.database.BaseRepository._create_entity" -> "src.database.BaseRepository._execute_query";
  "src.database.BaseRepository._create_entity" -> "datetime.datetime.now";
  "src.database.BaseRepository._create_entity" -> "src.database.Dict[str, Any].keys";
  "src.database.BaseRepository._update_entity" -> "src.database.BaseRepository._execute_query";
  "src.database.BaseRepository._update_entity" -> "datetime.datetime.now";
  "src.database.BaseRepository._update_entity" -> "src.database.Dict[str, Any].keys";
  "src.database.BaseRepository.delete" -> "src.database.BaseRepository._execute_query";
  "src.database.BaseRepository._map_result_to_entity" -> "datetime.datetime.now";
  "src.database.BaseRepository._map_result_to_entity" -> "<map>.get";
  "src.database.BaseRepository._generate_new_id" -> "datetime.datetime.now";
  "src.database.BaseRepository._generate_new_id" -> "<builtin>.hash";
  "src.database.BaseRepository._generate_new_id" -> "<builtin>.str";
  "src.database.TransactionManager.begin_transaction" -> "datetime.datetime.now";
  "src.database.TransactionManager.begin_transaction" -> "src.database.ConnectionPool.get_connection";
  "src.database.TransactionManager.add_operation" -> "datetime.datetime.now";
  "src.database.TransactionManager.commit_transaction" -> "src.database.TransactionManager.rollback_transaction";
  "src.database.TransactionManager.commit_transaction" -> "src.database.TransactionManager._execute_operation";
  "src.database.TransactionManager.commit_transaction" -> "src.database.ConnectionPool.return_connection";
  "src.database.TransactionManager.commit_transaction" -> "<builtin>.str";
  "src.database.TransactionManager.rollback_transaction" -> "src.database.ConnectionPool.return_connection";
  "src.database.TransactionManager._execute_operation" -> "datetime.datetime.now";
  "src.database.TransactionManager.get_active_transaction_count" -> "<builtin>.len";
  "src.database.TransactionManager.cleanup_stale_transactions" -> "<map>.items";
  "src.database.TransactionManager.cleanup_stale_transactions" -> "datetime.timedelta";
  "src.database.TransactionManager.cleanup_stale_transactions" -> "src.database.TransactionManager.rollback_transaction";
  "src.database.TransactionManager.cleanup_stale_transactions" -> "datetime.datetime.now";
  "src.database.TransactionManager.cleanup_stale_transactions" -> "append";
  "src.database.TransactionManager.cleanup_stale_transactions" -> "<builtin>.len";
  "src.database.create_database_connection" -> "src.database.ConnectionPool.__init__";
  "src.database.validate_query_params" -> "<builtin>.isinstance";
  "src.database.validate_query_params" -> "src.database.Dict[str, Any].items";
  "src.database.sanitize_table_name" -> "<builtin>.set";
  "src.database.sanitize_table_name" -> "<builtin>.isinstance";
  "src.database.sanitize_table_name" -> "<builtin>.ValueError";
  "src.utils" -> "src.utils.ApplicationConfig";
  "src.utils" -> "src.utils.ConfigurationError";
  "src.utils" -> "src.utils.DataExporter";
  "src.utils" -> "src.models";
  "src.utils" -> "src.utils.TaskScheduler";
  "src.utils" -> "src.api";
  "src.utils" -> "src.utils.SecurityUtils";
  "src.utils" -> "src.database";
  "src.utils" -> "src.utils.MetricsCollector";
  "src.utils" -> "src.utils.CacheManager";
  "src.utils.ApplicationConfig.validate" -> "append";
  "src.utils.SecurityUtils.hash_password_secure" -> "hashlib.pbkdf2_hmac";
  "src.utils.SecurityUtils.hash_password_secure" -> "src.utils.SecurityUtils.generate_salt";
  "src.utils.SecurityUtils.hash_password_secure" -> "src.utils.str.encode";
  "src.utils.SecurityUtils.verify_password_secure" -> "src.utils.SecurityUtils.hash_password_secure";
  "src.utils.SecurityUtils.generate_salt" -> "os.urandom";
  "src.utils.SecurityUtils.generate_api_key" -> "os.urandom";
  "src.utils.SecurityUtils.generate_api_key" -> "hashlib.sha256";
  "src.utils.SecurityUtils.sanitize_input" -> "re.sub";
  "src.utils.SecurityUtils.sanitize_input" -> "<builtin>.isinstance";
  "src.utils.SecurityUtils.validate_email_format" -> "re.match";
  "src.utils.SecurityUtils.validate_phone_format" -> "re.sub";
  "src.utils.SecurityUtils.validate_phone_format" -> "<builtin>.len";
  "src.utils.CacheManager.get" -> "src.utils.CacheManager._is_expired";
  "src.utils.CacheManager.get" -> "src.utils.CacheManager.delete";
  "src.utils.CacheManager.set" -> "datetime.datetime.now";
  "src.utils.CacheManager.set" -> "datetime.timedelta";
  "src.utils.CacheManager.delete" -> "<map>.pop";
  "src.utils.CacheManager.clear" -> "<map>.clear";
  "src.utils.CacheManager._is_expired" -> "datetime.datetime.now";
  "src.utils.CacheManager.cleanup_expired" -> "<map>.keys";
  "src.utils.CacheManager.cleanup_expired" -> "<builtin>.list";
  "src.utils.CacheManager.cleanup_expired" -> "src.utils.CacheManager._is_expired";
  "src.utils.CacheManager.cleanup_expired" -> "append";
  "src.utils.CacheManager.cleanup_expired" -> "src.utils.CacheManager.delete";
  "src.utils.CacheManager.cleanup_expired" -> "<builtin>.len";
  "src.utils.CacheManager.get_stats" -> "<map>.keys";
  "src.utils.CacheManager.get_stats" -> "src.utils.CacheManager._is_expired";
  "src.utils.CacheManager.get_stats" -> "<builtin>.len";
  "src.utils.CacheManager.get_stats" -> "<builtin>.sum";
  "src.utils.DataExporter.export_users_to_json" -> "json.dumps";
  "src.utils.DataExporter.export_users_to_json" -> "append";
  "src.utils.DataExporter.export_products_to_json" -> "json.dumps";
  "src.utils.DataExporter.export_to_csv" -> "io.StringIO";
  "src.utils.DataExporter.export_to_csv" -> "csv.DictWriter";
  "src.utils.DataExporter.create_backup_data" -> "src.utils.DataExporter.export_products_to_json";
  "src.utils.DataExporter.create_backup_data" -> "src.database.BaseRepository.find_all";
  "src.utils.DataExporter.create_backup_data" -> "src.models";
  "src.utils.DataExporter.create_backup_data" -> "src.utils.DataExporter.export_users_to_json";
  "src.utils.DataExporter.create_backup_data" -> "src.models.ProductRepository.__init__";
  "src.utils.DataExporter.create_backup_data" -> "src.models.UserRepository.__init__";
  "src.utils.DataExporter.create_backup_data" -> "datetime.datetime.now";
  "src.utils.DataExporter.create_backup_data" -> "<builtin>.len";
  "src.utils.MetricsCollector.record_request" -> "<builtin>.len";
  "src.utils.MetricsCollector.get_summary" -> "<builtin>.round";
  "src.utils.MetricsCollector.get_summary" -> "<builtin>.len";
  "src.utils.MetricsCollector.get_summary" -> "<builtin>.sum";
  "src.utils.MetricsCollector.get_summary" -> "<builtin>.sorted";
  "src.utils.MetricsCollector.get_summary" -> "<builtin>.max";
  "src.utils.MetricsCollector.reset" -> "src.utils.MetricsCollector.__init__";
  "src.utils.TaskScheduler.schedule_recurring_task" -> "datetime.datetime.now";
  "src.utils.TaskScheduler.schedule_recurring_task" -> "append";
  "src.utils.TaskScheduler.schedule_recurring_task" -> "datetime.timedelta";
  "src.utils.TaskScheduler.schedule_one_time_task" -> "append";
  "src.utils.TaskScheduler.run_pending_tasks" -> "logging.error";
  "src.utils.TaskScheduler.run_pending_tasks" -> "<builtin>.str";
  "src.utils.TaskScheduler.run_pending_tasks" -> "remove";
  "src.utils.TaskScheduler.run_pending_tasks" -> "datetime.datetime.now";
  "src.utils.TaskScheduler.run_pending_tasks" -> "append";
  "src.utils.setup_application_logging" -> "logging.basicConfig";
  "src.utils.setup_application_logging" -> "<builtin>.getattr";
  "src.utils.setup_application_logging" -> "logging.FileHandler";
  "src.utils.setup_application_logging" -> "logging.StreamHandler";
  "src.utils.create_sample_data" -> "<builtin>.round";
  "src.utils.create_sample_data" -> "<builtin>.range";
  "src.utils.create_sample_data" -> "src.models.ProductService.__init__";
  "src.utils.create_sample_data" -> "src.models.UserService.create_user";
  "src.utils.create_sample_data" -> "src.models";
  "src.utils.create_sample_data" -> "src.models.ProductService.create_product";
  "src.utils.create_sample_data" -> "src.models.UserService.__init__";
  "src.utils.create_sample_data" -> "append";
  "src.utils.create_sample_data" -> "<builtin>.len";
  "src.utils.perform_health_check" -> "datetime.datetime.now";
  "src.utils.perform_health_check" -> "psutil.virtual_memory";
  "src.utils.perform_health_check" -> "<builtin>.str";
  "src.utils.perform_health_check" -> "src.database.ConnectionPool.get_connection";
  "src.utils.perform_health_check" -> "src.database.ConnectionPool.return_connection";
  "src.utils.cleanup_application_resources" -> "<builtin>.str";
  "src.utils.cleanup_application_resources" -> "src.database.ConnectionPool.cleanup_stale_connections";
  "src.utils.cleanup_application_resources" -> "src.utils.CacheManager.cleanup_expired";
  "src.utils.cleanup_application_resources" -> "src.utils.MetricsCollector.get_summary";
  "src.utils.generate_secure_token" -> "secrets.randbytes";
  "src.utils.generate_secure_token" -> "base64.b64encode";
}